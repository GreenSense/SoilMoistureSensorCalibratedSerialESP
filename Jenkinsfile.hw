pipeline {
    agent any
    triggers {
        pollSCM 'H/2 * * * *'
    }
    options {
        disableConcurrentBuilds();
        skipDefaultCheckout();
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm

                sh "git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master"
                sh "git fetch --no-tags"
                sh 'git checkout $BRANCH_NAME'
                sh 'cp /usr/local/jenkins/set-soilmoisturesensorcalibratedserial-git-credentials.sh set-soilmoisturesensorcalibratedserial-git-credentials.sh'
                sh 'sh set-soilmoisturesensorcalibratedserial-git-credentials.sh'
                sh 'git config --global user.email "compulsivecoder@gmail.com"'
                sh 'git config --global user.name "CompulsiveCoder CI"'
            }
        }
        stage('Init') {
            steps {
                sh 'sh init.sh'
            }
        }
        stage('Inject Version') {
            steps {
                sh 'sh inject-version.sh'
            }
        }
        stage('Build') {
            steps {
                sh 'sh build-all.sh'
            }
        }
        stage('Upload') {
            steps {
                sh 'sh upload.sh'
            }
        }
        stage('Upload simulator') {
            steps {
                sh 'echo "Skipping simulator upload to speed up test." #sh upload-simulator.sh'
            }
        }
        stage('Test') {
            steps {
                sh 'sh test.sh'
            }
        }
        stage('Clean') {
            steps {
                sh 'git checkout src/SoilMoistureSensorCalibratedSerial/SoilMoistureSensorCalibratedSerial.ino'
            }
        }
        stage('Graduate') {
            steps {
                sh 'sh graduate.sh'
            }
        }
        stage('Increment Version') {
            steps {
                sh 'sh increment-version.sh'
            }
        } 
        stage('Push Version') {
            steps {
                sh 'sh push-version.sh'
            }
        } 
    }
    post {
        always {
            cleanWs()
        }
    }
}

